program -> declaration* EOF
declaration -> varDecl | statement ;

varDecl -> "var" IDENTIFIER ( "=" expression ";" )? ;

statement -> expressionStmt | printStmt | block | ifStmt | whileStmt | forStmt | "break" ;
expressionStmt -> expression ";" ;
printStmt -> "print" expression ";" ;
block -> "{" declaration* "}" ;
ifStmt -> "if" "(" expression ")" statement ( "else" statement )? ;
whileStmt -> "while" "(" expression ")" statement ;
forStmt -> "for" "(" ( varDecl | expressionStmt | ";" ) expression? ";" expression? ")" statement ;

expression -> ternary ("," ternary)* ;
ternary -> assignment "?" ternary ":" ternary | assignment ;
assignment -> IDENTIFIER "=" assignment | logic_or ;
logic_or -> logic_and ( "or" logic_and )* ;
logic_and -> equality ( "and" equality )* ;
equality -> comparison ( ( "!=" | "==" ) comparison)* ;
comparison -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
modulo -> term ( "%" term )* ;
term -> factor ( ( "+" | "-" ) factor)* ;
factor -> unary ( ( "*" | "/" ) unary)* ;
unary -> ( "!" | "-" ) unary | primary ;
primary -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;